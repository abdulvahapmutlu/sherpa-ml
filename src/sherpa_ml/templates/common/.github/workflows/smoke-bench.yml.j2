{% if ci and preset in ['vision','nlp','minimal','tabular'] -%}
name: Smoke Bench
on:
  workflow_dispatch:
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Generate a tiny repo to smoke-test install & train
      - name: Generate demo repo
        run: |
          sherpa-ml new work/demo-vision \
            --preset {{ preset }} \
            --framework {{ framework or 'pytorch' }} \
            --config {{ config_system or 'hydra' }} \
            --tracking {{ 'mlflow' if tracking_mlflow else 'none' }} \
            --docker none \
            --no-ci \
            --license {{ license or 'MIT' }} \
            --pkg {{ pkg or (repo_name | replace('-', '_')) }} \
            --render --force

      # Patch legacy tests that reference 'work/demo_vision' (search whole repo, no git needed)
      - name: Hot-fix legacy test imports
        working-directory: work/demo-vision
        shell: bash
        run: |
          set -eo pipefail
          PKG="{{ (pkg | default(repo_name, true) | default(project_name_pep508, true) | default('demo-vision', true)) | replace('-', '_') }}"
          # files to scan (only text)
          mapfile -t files < <(grep -RIl --exclude-dir .venv --exclude-dir dist --exclude-dir build "work/demo_vision" . || true)
          if ((${#files[@]})); then
            printf '%s\n' "${files[@]}" | xargs -r sed -i.bak \
              -e "s|__import__(\"work/demo_vision\")|__import__(\"${PKG}\")|g" \
              -e "s|__import__('work/demo_vision')|__import__('${PKG}')|g" \
              -e "s|-m \"work/demo_vision.train\"|-m \"${PKG}.train\"|g" \
              -e "s|-m 'work/demo_vision.train'|-m '${PKG}.train'|g" \
              -e "s|work/demo_vision.train|${PKG}.train|g" \
              -e "s|work/demo_vision|${PKG}|g"
            echo "Patched legacy imports to '${PKG}' in ${#files[@]} file(s)."
          else
            echo "No legacy imports found."
          fi

      # Validate (and auto-fix) pyproject.project.name to be PEP 508 compliant
      - name: Validate PEP 508 project.name
        working-directory: work/demo-vision
        run: |
          python - <<'PY'
          import re, sys, pathlib, os, tomllib
          def pep508ify(name: str) -> str:
              name = os.path.basename(name).lower()
              name = re.sub(r'[^a-z0-9._-]+', '-', name)
              name = re.sub(r'[-_.]{2,}', '-', name).strip('._-')
              return name or 'project'
          p = pathlib.Path("pyproject.toml")
          data = tomllib.loads(p.read_text(encoding="utf-8"))
          raw = (data.get("project") or {}).get("name")
          pat = re.compile(r'^[A-Za-z0-9](?:[A-Za-z0-9._-]*[A-Za-z0-9])?$')
          if raw and pat.fullmatch(raw):
              print(f"project.name OK: {raw}")
              sys.exit(0)
          safe = pep508ify(raw or "demo-vision")
          if not pat.fullmatch(safe):
              print(f"Could not coerce to valid PEP 508 name. Got: {safe!r}")
              sys.exit(1)
          txt = p.read_text(encoding="utf-8")
          import re as _re
          if raw:
              txt = _re.sub(r'(?m)^(\\s*name\\s*=\\s*")[^"]*(")\\s*$', rf'\\1{safe}\\2', txt, count=1)
          else:
              txt = txt.replace("[project]", f"[project]\nname = \"{safe}\"", 1)
          p.write_text(txt, encoding="utf-8")
          print(f"project.name fixed: {raw!r} -> {safe!r}")
          PY

      - name: Install demo (editable)
        working-directory: work/demo-vision
        run: |
          python -m pip install -U pip
          pip install -e .[dev]

      - name: Run smoke (vision/nlp/minimal/tabular)
        working-directory: work/demo-vision
        run: |
          python -m pytest -q

{%- else -%}
{{ SKIP_FILE }}
{%- endif %}
SS
