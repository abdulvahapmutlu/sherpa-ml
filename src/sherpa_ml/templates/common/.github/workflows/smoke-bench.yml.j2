{% if ci and preset in ['vision','nlp','minimal','tabular'] -%}
name: Smoke Bench
on:
  workflow_dispatch:
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Generate demo repo
        run: |
          sherpa-ml new work/demo-vision \
            --preset {{ preset | default('vision') }} \
            --framework {{ framework | default('pytorch') }} \
            --config {{ config_system | default('hydra') }} \
            --tracking {{ ('mlflow' if (tracking_mlflow | default(false)) else 'none') }} \
            --docker none \
            --no-ci \
            --license {{ license | default('MIT') }} \
            --pkg {{ (pkg | default(repo_name, true)) | replace('-', '_') }} \
            --render --force

      - name: Patch legacy test imports
        working-directory: work/demo-vision
        shell: bash
        run: |
          set -eo pipefail
          PKG="{{ (pkg | default(repo_name, true) | default(project_name_pep508, true) | default('demo-vision', true)) | replace('-', '_') }}"
          # Find text files that reference 'work/demo_vision' (ignore common build/venv dirs)
          mapfile -t files < <(grep -RIl --exclude-dir=.venv --exclude-dir=dist --exclude-dir=build --exclude-dir=.git "work/demo_vision" . || true)
          if ((${#files[@]})); then
            printf '%s\0' "${files[@]}" | xargs -0 -r sed -i.bak \
              -e "s|__import__(\"work/demo_vision\")|__import__(\"${PKG}\")|g" \
              -e "s|__import__('work/demo_vision')|__import__('${PKG}')|g" \
              -e "s|-m \"work/demo_vision.train\"|-m \"${PKG}.train\"|g" \
              -e "s|-m 'work/demo_vision.train'|-m '${PKG}.train'|g" \
              -e "s|work/demo_vision.train|${PKG}.train|g" \
              -e "s|work/demo_vision|${PKG}|g"
            echo "Patched legacy imports to '${PKG}' in ${#files[@]} file(s)."
          else
            echo "No legacy imports found."
          fi

      - name: Validate/Coerce PEP 508 project.name
        working-directory: work/demo-vision
        shell: bash
        run: |
          python - <<'PY'
          import os, re, sys, pathlib
          try:
              import tomllib
          except Exception:
              import tomli as tomllib
          p = pathlib.Path("pyproject.toml")
          data = tomllib.loads(p.read_text(encoding="utf-8"))
          proj = data.get("project") or {}
          name = proj.get("name") or ""
          pat = re.compile(r'^[A-Za-z0-9](?:[A-Za-z0-9._-]*[A-Za-z0-9])?$')
          if not pat.fullmatch(name):
              base = os.path.basename(name or "demo-vision").lower()
              safe = re.sub(r'[^a-z0-9._-]+','-', base)
              safe = re.sub(r'[-_.]{2,}','-', safe).strip('._-') or 'project'
              txt = p.read_text(encoding="utf-8")
              if "name" in proj:
                  txt = re.sub(r'(?m)^(\\s*name\\s*=\\s*")[^"]*(")\\s*$', rf'\\1{safe}\\2', txt, count=1)
              else:
                  txt = txt.replace("[project]", f"[project]\\nname = \\"{safe}\\"", 1)
              p.write_text(txt, encoding="utf-8")
              print(f"project.name fixed: {name!r} -> {safe!r}")
          else:
              print(f"project.name OK: {name}")
          PY

      - name: Install demo (editable)
        working-directory: work/demo-vision
        shell: bash
        run: |
          python -m pip install -U pip
          pip install -e .[dev]

      - name: Run smoke tests
        working-directory: work/demo-vision
        shell: bash
        run: |
          python -m pytest -q
{%- else -%}
{{ SKIP_FILE }}
{%- endif %}
