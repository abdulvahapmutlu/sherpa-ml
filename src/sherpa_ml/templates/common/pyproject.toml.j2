{% set _raw = (repo_name | default(dist_name, true) | default(pkg_name, true)) %}
{% set _base = (_raw | replace('\\', '/') | split('/') | last) %}
{% set dist_name = _base %}
{% set pkg_name = dist_name | replace('-', '_') | replace('.', '_') %}

[build-system]
requires = ["setuptools>=69", "wheel", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ (repo_name|default('', true)|replace('\\','/')|split('/')|last) 
            or (dist_name|default('', true)|replace('\\','/')|split('/')|last) 
            or (pkg_name|default('', true)) 
            or 'project' }}"
version = "0.1.0"
description = "{{ dist_name | replace('_',' ') | replace('-',' ') | title }} â€” ML project scaffold generated by sherpa-ml"
readme = "README.md"
requires-python = ">=3.10"
authors = [{ name = "Abdulvahap Mutlu" }]
license = { text = "MIT" }
keywords = ["ml", "deep-learning", "scaffold", "sherpa-ml"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]

dependencies = [
  "numpy>=1.24",
  "pydantic>=2.7",
  {% if framework == "pytorch" %}"torch>=2.2",{% endif %}
  {% if config_tool == "hydra" %}"hydra-core>=1.3",{% endif %}
  {% if tracking == "mlflow" %}"mlflow>=2.11",{% endif %}
]

[project.optional-dependencies]
dev = [
  "pytest>=7",
  "pytest-cov>=4",
  "ruff>=0.5",
  "black>=24.4",
  "mypy>=1.10",
  "pre-commit>=3.7",
  "ipykernel",
  "build",
]
viz = [ "matplotlib>=3.8", "plotly>=5.22" ]
e2e = [ "tox>=4.15" ]

[project.urls]
Homepage = "https://github.com/abdulvahapmutlu/sherpa-ml"
Issues   = "https://github.com/abdulvahapmutlu/sherpa-ml/issues"

[project.scripts]
{{ pkg_name }} = "{{ pkg_name }}.cli:main"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["{{ pkg_name }}*"]

[tool.setuptools_scm]
# write_to = "src/{{ pkg_name }}/_version.py"

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.ruff]
line-length = 100
target-version = "py310"
lint.select = ["E","F","I","UP","B","C4","SIM"]
lint.ignore = ["E203","E266","E501"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-q --cov={{ pkg_name }} --cov-report=term-missing"
testpaths = ["tests"]

[tool.coverage.run]
source = ["src/{{ pkg_name }}"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true


